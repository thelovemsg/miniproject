{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: error.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    console.log(\"log out saga saga\");\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (error) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: error.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest('LOG_OUT_REQUREST', logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","logInAPI","data","axios","post","login","action","type","error","logOutAPI","logout","console","log","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,KAAP,EAAc;AACZ,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEM,KAAK,CAACN;AAFN,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAqB;AACjB,SAAON,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX,CAFA,CAGA;;AACA,UAAMD,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEM,KAAK,CAACN;AAFN,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,UAAV,GAAsB;AAClB,QAAMb,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB,CADkB,CACyB;AAC9C;;AAED,UAAUS,WAAV,GAAuB;AACnB;AACA,QAAMd,UAAU,CAAC,kBAAD,EAAqBU,MAArB,CAAhB,CAFmB,CAE2B;AAC9C;AACH;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CACNC,IAAI,CAACgB,UAAD,CADE,EAENhB,IAAI,CAACiB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logout() {\r\n    try {\r\n        console.log(\"log out saga saga\")\r\n        yield delay(1000);\r\n        // const result = yield call(logOutAPI);\r\n        yield put({\r\n            type: 'LOG_OUT_SUCCESS',\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: 'LOG_OUT_FAILURE',\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest('LOG_IN_REQUEST', login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest('LOG_OUT_REQUREST', logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}