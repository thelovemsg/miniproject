{"ast":null,"code":"import { delay, fork, all, takeLatest, put, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\"; // import Axios from 'axios';\n// import qs from 'query-string';\n\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  // let newObj = {\n  //     desciption: data\n  // }\n  // // // console.log(\"newObj :: \", newObj);\n  // // return axios.post('/api/postContent', null,{\n  // //     description : data\n  // // });\n  // Axios({\n  //     url: '/api/postContent',\n  //     method: 'post',\n  //     data: JSON.stringify(newObj), \n  //     baseURL: 'http://localhost:8080',\n  //     contentType: 'application/x-www-form-urlencoded',\n  //     withCredentials: true,\n  //   }).then((response) => {\n  //       return response;\n  //   })\n  let newObj = {\n    dseciption: data\n  };\n  return axios.post(url, JSON.stringify(newObj), {\n    headers: {\n      \"Content-Type\": `application/json`\n    }\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    console.log(\"action.data :: \", action.data);\n    console.log(\"action :: \", action);\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result :: \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["delay","fork","all","takeLatest","put","call","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","generateDummyPost","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","newObj","dseciption","axios","post","url","JSON","stringify","headers","addPost","action","console","log","result","type","id","content","error","loadPostAPI","get","loadPost","generate","removePostAPI","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put, call} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\n// import Axios from 'axios';\r\n// import qs from 'query-string';\r\nimport { \r\n    ADD_COMMENT_FAILURE, \r\n    ADD_COMMENT_REQUEST, \r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, \r\n    ADD_POST_REQUEST, \r\n    ADD_POST_SUCCESS, \r\n    ADD_POST_TO_ME, \r\n    generateDummyPost, \r\n    LOAD_POST_FAILURE, \r\n    LOAD_POST_REQUEST, \r\n    LOAD_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE, \r\n    REMOVE_POST_REQUEST, \r\n    REMOVE_POST_SUCCESS \r\n} from \"../reducers/post\";\r\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n    // let newObj = {\r\n    //     desciption: data\r\n    // }\r\n    // // // console.log(\"newObj :: \", newObj);\r\n    // // return axios.post('/api/postContent', null,{\r\n    // //     description : data\r\n    // // });\r\n    // Axios({\r\n    //     url: '/api/postContent',\r\n    //     method: 'post',\r\n    //     data: JSON.stringify(newObj), \r\n    //     baseURL: 'http://localhost:8080',\r\n    //     contentType: 'application/x-www-form-urlencoded',\r\n    //     withCredentials: true,\r\n    //   }).then((response) => {\r\n    //       return response;\r\n    //   })\r\n    let newObj = {\r\n        dseciption: data\r\n    }\r\n    return axios.post(url,  JSON.stringify(newObj), {\r\n      headers: {\r\n        \"Content-Type\": `application/json`,\r\n      },\r\n    })\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        console.log(\"action.data :: \", action.data);\r\n        console.log(\"action :: \", action);\r\n\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result :: \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n            \r\n        });\r\n        yield put({ \r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}