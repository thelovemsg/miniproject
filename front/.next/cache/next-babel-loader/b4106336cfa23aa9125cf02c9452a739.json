{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, SIGN_UP_FAIL_DUPLICATE } from \"../reducers/user\";\nexport const FAIL = \"FAIL\";\nexport const SUCCESS = \"SUCCESS\";\nexport const DUPLICATE = \"DUPLICATE\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  console.log(\"action.data :: \", action.data);\n\n  try {\n    yield delay(1000);\n    axios.post(\"http://localhost:8080/api/login\", action.data);\n    then(response => console.log(response));\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    }); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    yield delay(1000);\n    const result = yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  let test = axios.post('http://localhost:8080/api/member', data);\n  return test;\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    if (result.data === SUCCESS) {\n      yield put({\n        type: SIGN_UP_SUCCESS\n      });\n    } else if (result.data === DUPLICATE) {\n      yield put({\n        type: SIGN_UP_FAIL_DUPLICATE\n      });\n    } else if (result.data === FAIL) {\n      yield put({\n        type: SIGN_UP_FAIL\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SIGN_UP_FAIL_DUPLICATE","FAIL","SUCCESS","DUPLICATE","logInAPI","data","post","login","action","console","log","then","response","type","error","logOutAPI","logout","result","signUpAPI","test","signUp","SIGN_UP_FAIL","followAPI","follow","unFollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    LOG_IN_FAILURE, \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, \r\n    LOG_OUT_REQUEST, \r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_REQUEST, \r\n    FOLLOW_REQUEST, \r\n    UNFOLLOW_REQUEST, \r\n    FOLLOW_FAILURE, \r\n    FOLLOW_SUCCESS, \r\n    UNFOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    SIGN_UP_FAIL_DUPLICATE\r\n} from \"../reducers/user\";\r\n\r\nexport const FAIL = \"FAIL\";\r\nexport const SUCCESS = \"SUCCESS\";\r\nexport const DUPLICATE = \"DUPLICATE\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\n\r\nfunction* login(action) {\r\n    console.log(\"action.data :: \", action.data);\r\n    try {\r\n        yield delay(1000);\r\n\r\n        axios.post(\"http://localhost:8080/api/login\", action.data);\r\n        then(response => \r\n            console.log(response)\r\n        );\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n      \r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logout() {\r\n    try {\r\n        yield delay(1000);\r\n        const result = yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    let test = axios.post('http://localhost:8080/api/member', data);\r\n    return test;\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        if(result.data === SUCCESS){\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            });\r\n        } else if(result.data === DUPLICATE){\r\n            yield put({\r\n                type: SIGN_UP_FAIL_DUPLICATE,\r\n            });\r\n        } else if(result.data === FAIL){\r\n            yield put({\r\n                type: SIGN_UP_FAIL,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}