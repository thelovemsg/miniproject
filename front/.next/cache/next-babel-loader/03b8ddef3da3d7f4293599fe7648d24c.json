{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from './user';\nimport post from './post';\nconst initialState = {\n  user: {\n    user\n  },\n  post: {\n    post\n  }\n}; //async action creator\n// action creator\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; // (이전 상태, 액션) => 다음 상태\n\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/miniproject/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","changeNickname","data","type","rootReducer","index","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAE;AACFA,IAAAA;AADE,GADW;AAIjBC,EAAAA,IAAI,EAAE;AACFA,IAAAA;AADE;AAJW,CAArB,C,CASA;AAEA;;AACA,MAAME,cAAc,GAAIC,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAG,iBADJ;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD,C,CAQA;;;AACA,MAAME,WAAW,GAAGP,eAAe,CAAC;AAChCQ,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAOA,MAAM,CAACJ,IAAd;AACI,WAAKP,OAAL;AACI,+CACOU,KADP,GACiBC,MAAM,CAACC,OADxB;;AAGJ;AACI,eAAOF,KAAP;AANR;AAQH,GAV+B;AAWhCR,EAAAA,IAXgC;AAYhCC,EAAAA;AAZgC,CAAD,CAAnC;AAeA,eAAeK,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\nimport user from './user';\r\nimport post from './post';\r\n\r\nconst initialState = {\r\n    user: {\r\n        user\r\n    },\r\n    post: {\r\n        post\r\n    },\r\n};\r\n\r\n//async action creator\r\n\r\n// action creator\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type : 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n};\r\n\r\n\r\n// (이전 상태, 액션) => 다음 상태\r\nconst rootReducer = combineReducers({\r\n    index: (state = {}, action) => {\r\n        switch(action.type){\r\n            case HYDRATE:\r\n                return {\r\n                    ...state, ...action.payload\r\n                }\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}