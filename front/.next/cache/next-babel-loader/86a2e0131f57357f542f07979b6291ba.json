{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, SIGN_UP_FAIL_DUPLICATE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAIL } from \"../reducers/user\";\n``;\n\nvar jwt = require('jsonwebtoken');\n\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\nconst cookies = new Cookies();\n\nfunction loadMyInfoAPI() {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\"); // return axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n  const data = {\n    email: userEmail\n  };\n  return axios.post('/auth/member', data, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const response = yield call(loadMyInfoAPI);\n\n    if (response.data != \"\") {\n      yield put({\n        type: LOAD_MY_INFO_SUCCESS,\n        data: response.data.result.postDtoIds\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: LOAD_MY_INFO_FAIL,\n      error: error.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/auth/login', data);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    if (result.status == 401) {\n      warningMsg(\"로그인에 실패했습니다.\");\n      yield put({\n        type: LOG_IN_FAILURE\n      });\n    } else {\n      var base64Payload = result.data.accessToken.split('.')[1]; //value 0 -> header, 1 -> payload, 2 -> VERIFY SIGNATURE var payload = Buffer.from(base64Payload, 'base64'); var result = JSON.parse(payload.toString()) console.log(result);\n\n      cookies.set(\"accessToken\", result.data.accessToken, {\n        path: '/'\n      });\n      cookies.set(\"refreshToken\", result.data.accessToken, {\n        path: '/'\n      });\n      cookies.set(\"userEmail\", action.data.email);\n      yield put({\n        type: LOG_IN_SUCCESS\n      });\n      const response = yield call(loadMyInfoAPI);\n\n      if (response.data != \"\") {\n        yield put({\n          type: LOAD_MY_INFO_SUCCESS,\n          data: response.data.result.postDtoIds\n        });\n      }\n    }\n  } catch (error) {\n    warningMsg(\"로그인에 실패했습니다!\");\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    cookies.remove('accessToken');\n    cookies.remove('refreshToken');\n    cookies.remove('userEmail');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/auth/signup', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    if (result.data.status === DUPLICATE) {\n      yield put({\n        type: SIGN_UP_FAIL_DUPLICATE\n      });\n    } else {\n      yield put({\n        type: SIGN_UP_SUCCESS\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","axios","Cookies","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SIGN_UP_FAIL_DUPLICATE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAIL","jwt","require","warningMsg","cookies","loadMyInfoAPI","accessToken","get","userEmail","data","email","post","headers","loadMyInfo","action","response","type","result","postDtoIds","error","logInAPI","login","status","base64Payload","split","set","path","logout","remove","signUpAPI","signUp","DUPLICATE","followAPI","follow","unFollowAPI","unfollow","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\r\n\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport {\r\n    LOG_IN_FAILURE, \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, \r\n    LOG_OUT_REQUEST, \r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_REQUEST, \r\n    FOLLOW_REQUEST, \r\n    UNFOLLOW_REQUEST, \r\n    FOLLOW_FAILURE, \r\n    FOLLOW_SUCCESS, \r\n    UNFOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    SIGN_UP_FAIL_DUPLICATE,\r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAIL\r\n} from \"../reducers/user\";``\r\nvar jwt = require('jsonwebtoken');\r\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\r\nconst cookies = new Cookies();\r\n\r\nfunction loadMyInfoAPI() {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    // return axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    const data = {\r\n        email: userEmail\r\n    }\r\n\r\n    return axios.post('/auth/member', data,{\r\n        headers:{\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        const response = yield call(loadMyInfoAPI);\r\n        if(response.data != \"\"){\r\n            yield put({\r\n                type: LOAD_MY_INFO_SUCCESS,\r\n                data: response.data.result.postDtoIds\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAIL,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/auth/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data);\r\n        if(result.status == 401){\r\n            warningMsg(\"로그인에 실패했습니다.\");\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n            })\r\n        }else{\r\n            var base64Payload = result.data.accessToken.split('.')[1]; //value 0 -> header, 1 -> payload, 2 -> VERIFY SIGNATURE var payload = Buffer.from(base64Payload, 'base64'); var result = JSON.parse(payload.toString()) console.log(result);\r\n            \r\n            cookies.set(\"accessToken\", result.data.accessToken,{ path: '/' });\r\n            cookies.set(\"refreshToken\", result.data.accessToken,{ path: '/' });\r\n            cookies.set(\"userEmail\", action.data.email);\r\n            yield put({\r\n                type: LOG_IN_SUCCESS,\r\n            });\r\n            const response = yield call(loadMyInfoAPI);\r\n            if(response.data != \"\"){\r\n                yield put({\r\n                    type: LOAD_MY_INFO_SUCCESS,\r\n                    data: response.data.result.postDtoIds\r\n                });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        warningMsg(\"로그인에 실패했습니다!\");\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* logout() {\r\n    try {\r\n        cookies.remove('accessToken');\r\n        cookies.remove('refreshToken');\r\n        cookies.remove('userEmail');\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/auth/signup', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        if(result.data.status === DUPLICATE){\r\n            yield put({\r\n                type: SIGN_UP_FAIL_DUPLICATE,\r\n            });\r\n        } else {\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMyInfo(){\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}