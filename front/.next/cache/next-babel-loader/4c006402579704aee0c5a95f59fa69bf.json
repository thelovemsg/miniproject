{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { delay, fork, all, takeLatest, put } from \"redux-saga/effects\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 3:\n          _context.next = 9;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 9;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.data\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","delay","fork","all","takeLatest","put","addPostAPI","data","axios","post","action","type","result"],"mappings":";;oDAMUA,O;qDAeAC,Y;qDAIeC,Q;;AAzBzB,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,UAA3B,EAAuCC,GAAvC,QAAiD,oBAAjD;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AAED,SAAUT,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAML,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,kBADA;AAENJ,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMF,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,kBADA;AAENJ,YAAAA,IAAI,EAAE,YAAMA;AAFN,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUR,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAAC,kBAAD,EAAqBN,OAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACND,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId","sourcesContent":["import { delay, fork, all, takeLatest, put} from \"redux-saga/effects\";\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: result.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest('ADD_POST_REQUEST', addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}