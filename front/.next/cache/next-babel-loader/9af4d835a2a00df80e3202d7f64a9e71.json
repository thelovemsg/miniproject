{"ast":null,"code":"import { delay, fork, all, takeLatest, put, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  console.log(\"data :: \", data);\n  return axios.post('/api/post', null, {\n    PostDto: {\n      description: data\n    }\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    console.log(\"action.data :: \", action.data);\n    console.log(\"action :: \", action);\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result :: \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["delay","fork","all","takeLatest","put","call","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","generateDummyPost","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","console","log","axios","post","PostDto","description","addPost","action","result","type","id","content","error","loadPostAPI","get","loadPost","generate","removePostAPI","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put, call} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport { \r\n    ADD_COMMENT_FAILURE, \r\n    ADD_COMMENT_REQUEST, \r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, \r\n    ADD_POST_REQUEST, \r\n    ADD_POST_SUCCESS, \r\n    ADD_POST_TO_ME, \r\n    generateDummyPost, \r\n    LOAD_POST_FAILURE, \r\n    LOAD_POST_REQUEST, \r\n    LOAD_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE, \r\n    REMOVE_POST_REQUEST, \r\n    REMOVE_POST_SUCCESS \r\n} from \"../reducers/post\";\r\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n    console.log(\"data :: \", data)\r\n    return axios.post('/api/post', null, \r\n        {\r\n            PostDto : {\r\n            description : data }\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        console.log(\"action.data :: \", action.data);\r\n        console.log(\"action :: \", action);\r\n\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result :: \", result);\r\n\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n            \r\n        });\r\n        yield put({ \r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}