{"ast":null,"code":"import { delay, fork, all, takeLatest, put } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    delay(2000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addComment(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["delay","fork","all","takeLatest","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","error","loadPostAPI","get","loadPost","removePostAPI","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n     ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\r\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        delay(2000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n            \r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}