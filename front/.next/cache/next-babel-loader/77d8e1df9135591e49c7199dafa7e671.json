{"ast":null,"code":"const http = require('http');\n\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from \"../reducers/user\";\nimport { useEffect, useState } from \"react\";\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* login(action) {\n  try {\n    yield delay(1000);\n    axios({\n      url: \"http://localhost:8090/api/hello\",\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'json',\n      httpsAgent: new https.Agent({\n        rejectUnauthorized: false\n      })\n    }).then(response => {\n      console.log(\"response!\");\n      console.log(response);\n    }).catch(error => {\n      console.log(\"error!\");\n      console.log(error);\n    });\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    }); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logout() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["http","require","all","fork","put","delay","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","useEffect","useState","logInAPI","data","post","login","action","url","method","headers","responseType","httpsAgent","https","Agent","rejectUnauthorized","then","response","console","log","catch","error","type","logOutAPI","logout","signUpAPI","signUp","followAPI","follow","unFollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EACSC,eADT,EAC0BC,eAD1B,EAC2CC,eAD3C,EAESC,eAFT,EAE0BC,eAF1B,EAE2CC,eAF3C,EAE4DC,cAF5D,EAE4EC,gBAF5E,EAE8FC,cAF9F,EAE8GC,cAF9G,EAE8HC,gBAF9H,EAEgJC,gBAFhJ,QAEuK,kBAFvK;AAGA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOnB,KAAK,CAACoB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAGD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AAEpB,MAAI;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX;AACAE,IAAAA,KAAK,CAAC;AACFuB,MAAAA,GAAG,EAAE,iCADH;AAEFC,MAAAA,MAAM,EAAE,KAFN;AAGFC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHP;AAMFC,MAAAA,YAAY,EAAE,MANZ;AAOFC,MAAAA,UAAU,EAAE,IAAIC,KAAK,CAACC,KAAV,CAAgB;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAhB;AAPV,KAAD,CAAL,CASKC,IATL,CASUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,KAZL,EAaKG,KAbL,CAaWC,KAAK,IAAI;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,KAhBL;AAkBA,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAElC,cADA;AAENgB,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT,CApBA,CAwBA;AAEH,GA1BD,CA0BE,OAAOiB,KAAP,EAAc;AACZ,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEpC,cADA;AAENmC,MAAAA,KAAK,EAAEA,KAAK,CAACjB;AAFP,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmB,SAAT,GAAqB;AACjB,SAAOtC,KAAK,CAACoB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUmB,MAAV,GAAmB;AACf,MAAI;AACA,UAAMzC,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE/B;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAO8B,KAAP,EAAc;AACZ,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEjC,eADA;AAENgC,MAAAA,KAAK,EAAEA,KAAK,CAACjB;AAFP,KAAD,CAAT;AAIH;AACJ;;AAED,SAASqB,SAAT,GAAqB;AACjB,SAAOxC,KAAK,CAACoB,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUqB,MAAV,CAAiBnB,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE7B,eADA;AAENW,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOiB,KAAP,EAAc;AACZ,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAE9B,eADA;AAEN6B,MAAAA,KAAK,EAAEA,KAAK,CAACjB;AAFP,KAAD,CAAT;AAIH;AACJ;;AAED,SAASuB,SAAT,CAAmBvB,IAAnB,EAAyB;AACrB,SAAOnB,KAAK,CAACoB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUwB,MAAV,CAAiBrB,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAExB,cADA;AAENM,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOiB,KAAP,EAAc;AACZ,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEzB,cADA;AAENwB,MAAAA,KAAK,EAAEA,KAAK,CAACjB;AAFP,KAAD,CAAT;AAIH;AACJ;;AAED,SAASyB,WAAT,CAAqBzB,IAArB,EAA2B;AACvB,SAAOnB,KAAK,CAACoB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAU0B,QAAV,CAAmBvB,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMD,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEvB,gBADA;AAENK,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOiB,KAAP,EAAc;AACZ,UAAMvC,GAAG,CAAC;AACNwC,MAAAA,IAAI,EAAEtB,gBADA;AAENqB,MAAAA,KAAK,EAAEA,KAAK,CAACjB;AAFP,KAAD,CAAT;AAIH;AACJ;;AAED,UAAU2B,WAAV,GAAuB;AACnB,QAAM/C,UAAU,CAACW,cAAD,EAAiBiC,MAAjB,CAAhB,CADmB,CACuB;AAC7C;;AAED,UAAUI,aAAV,GAAyB;AACrB,QAAMhD,UAAU,CAACY,gBAAD,EAAmBkC,QAAnB,CAAhB,CADqB,CACyB;AACjD;;AAED,UAAUG,UAAV,GAAsB;AAClB,QAAMjD,UAAU,CAACG,cAAD,EAAiBmB,KAAjB,CAAhB,CADkB,CACuB;AAC5C;;AAED,UAAU4B,WAAV,GAAuB;AACnB;AACA,QAAMlD,UAAU,CAACM,eAAD,EAAkBkC,MAAlB,CAAhB,CAFmB,CAEwB;AAC3C;AACH;;AAED,UAAUW,WAAV,GAAuB;AACnB,QAAMnD,UAAU,CAACU,eAAD,EAAkBgC,MAAlB,CAAhB,CADmB,CACwB;AAC9C;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAChC,QAAMxD,GAAG,CAAC,CACNC,IAAI,CAACkD,WAAD,CADE,EAENlD,IAAI,CAACmD,aAAD,CAFE,EAGNnD,IAAI,CAACoD,UAAD,CAHE,EAINpD,IAAI,CAACqD,WAAD,CAJE,EAKNrD,IAAI,CAACsD,WAAD,CALE,CAAD,CAAT;AAOH","sourcesContent":["const http = require('http');\r\nimport { all, fork, put, delay, takeLatest } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, \r\n         LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS \r\n        ,SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE} from \"../reducers/user\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\n\r\nfunction* login(action) {\r\n\r\n    try {\r\n        yield delay(1000);\r\n        axios({\r\n            url: \"http://localhost:8090/api/hello\",\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            responseType: 'json',\r\n            httpsAgent: new https.Agent({ rejectUnauthorized: false })\r\n            })\r\n            .then(response => {\r\n                console.log(\"response!\")\r\n                console.log(response);\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error!\")\r\n                console.log(error);\r\n            })\r\n            \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n      \r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logout() {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}