{"ast":null,"code":"var _jsxFileName = \"D:\\\\miniproject\\\\front\\\\components\\\\middleComponent\\\\Post\\\\PostCard.js\";\n\n/** @jsxImportSource @emotion/react */\nimport { jsx, css } from '@emotion/react';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport ButtonGroup from 'antd/lib/button/button-group';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../../../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onLike = useCallback(() => {\n    dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.postId\n    });\n  }, []);\n  const onUnlike = useCallback(() => {\n    dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.postId\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // optional chaining\n  // const id = me && me.id;\n\n  const liked = post.likers.find(v => {\n    if (v.memberId == id) {\n      return true;\n    }\n  }) || false;\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return _jsxDEV(\"div\", {\n    children: [_jsxDEV(Card, {\n      cover: post.imageList[0] && _jsxDEV(PostImages, {\n        images: post.imageList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 45\n      }, this),\n      actions: [_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), liked ? _jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 27\n      }, this) : _jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 27\n      }, this), _jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), _jsxDEV(Popover, {\n        content: _jsxDEV(Button.Group, {\n          children: id && post.memberId === id ? _jsxDEV(_Fragment, {\n            children: [_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), _jsxDEV(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : _jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this),\n        children: _jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)] // extra={ id && <FollowButton post={post} />}\n      ,\n      children: _jsxDEV(Card.Meta, {\n        avatar: _jsxDEV(Avatar, {\n          children: post.writer[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this),\n        title: post.writer,\n        description: _jsxDEV(PostCardContent, {\n          postData: post.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, post.postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this), commentFormOpend && _jsxDEV(\"div\", {\n      children: [_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), _jsxDEV(List, {\n        header: `${post.commentList.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.commentList,\n        renderItem: item => _jsxDEV(\"li\", {\n          children: _jsxDEV(Comment, {\n            author: item.writer,\n            avatar: _jsxDEV(Avatar, {\n              children: item.writer[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 45\n            }, this),\n            content: item.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 8\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["D:/miniproject/front/components/middleComponent/Post/PostCard.js"],"names":["jsx","css","EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","PropTypes","Form","Input","Button","Card","Popover","Avatar","List","Comment","ButtonGroup","useCallback","useState","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","PostCard","post","dispatch","removePostLoading","state","commentFormOpend","setCommentFormOpened","onLike","type","data","postId","onUnlike","onToggleComment","prev","id","user","me","liked","likers","find","v","memberId","onRemovePost","imageList","writer","description","commentList","length","item","propTypes","shape","number","User","object","content","string","createdAt","Comments","arrayOf","Images","isRequired"],"mappings":";;AAAA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,gBAAzB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,YAA1C,EAAwDC,eAAxD,EAAyEC,eAAzE,QAAgG,mBAAhG;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqDC,IAArD,EAA2DC,OAA3D,QAA0E,MAA1E;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,EAAiDC,mBAAjD,QAA4E,wBAA5E;;;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAwBV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACH,IAAlB,CAAzC;AACA,QAAM;AAAA,OAACI,gBAAD;AAAA,OAAmBC;AAAnB,MAA2Cf,QAAQ,CAAC,KAAD,CAAzD;AAEA,QAAMgB,MAAM,GAAGjB,WAAW,CAAC,MAAM;AAC7BY,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX,iBADD;AAELY,MAAAA,IAAI,EAAER,IAAI,CAACS;AAFN,KAAD,CAAR;AAIH,GALyB,EAKvB,EALuB,CAA1B;AAOA,QAAMC,QAAQ,GAAGrB,WAAW,CAAC,MAAM;AAC/BY,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAET,mBADD;AAELU,MAAAA,IAAI,EAAER,IAAI,CAACS;AAFN,KAAD,CAAR;AAIH,GAL2B,EAKzB,EALyB,CAA5B;AAMA,QAAME,eAAe,GAAGtB,WAAW,CAAC,MAAM;AACtCgB,IAAAA,oBAAoB,CAAEO,IAAD,IAAU,CAACA,IAAZ,CAApB;AACH,GAFkC,EAEhC,EAFgC,CAAnC;AAGA,QAAMC,EAAE,GAAGrB,WAAW,CAAEW,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACW,IAAN,CAAWC,EAAtB,mDAAW,eAAeF,EAA1B;AAAA,GAAD,CAAtB,CArB2B,CAqB2B;AACtD;;AACA,QAAMG,KAAK,GAAGhB,IAAI,CAACiB,MAAL,CAAYC,IAAZ,CAAkBC,CAAD,IAAO;AAClC,QAAGA,CAAC,CAACC,QAAF,IAAcP,EAAjB,EAAqB;AACjB,aAAO,IAAP;AACH;AACJ,GAJa,KAIR,KAJN;AAKA,QAAMQ,YAAY,GAAGhC,WAAW,CAAC,MAAM;AACnCY,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,mBADD;AAELW,MAAAA,IAAI,EAAER,IAAI,CAACa;AAFN,KAAD,CAAR;AAIH,GAL+B,EAK7B,EAL6B,CAAhC;AAMA,SACG;AAAA,eACI,QAAC,IAAD;AACK,MAAA,KAAK,EAAEb,IAAI,CAACsB,SAAL,CAAe,CAAf,KAAqB,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEtB,IAAI,CAACsB;AAAzB;AAAA;AAAA;AAAA;AAAA,cADjC;AAEK,MAAA,OAAO,EAAE,CACL,QAAC,eAAD,MAAqB,SAArB;AAAA;AAAA;AAAA;AAAA,cADK,EAELN,KAAK,GACC,QAAC,YAAD;AAAc,QAAA,YAAY,EAAC,SAA3B;AAAiD,QAAA,OAAO,EAAEN;AAA1D,SAAyC,OAAzC;AAAA;AAAA;AAAA;AAAA,cADD,GAEC,QAAC,aAAD;AAA2B,QAAA,OAAO,EAAEJ;AAApC,SAAmB,OAAnB;AAAA;AAAA;AAAA;AAAA,cAJD,EAML,QAAC,eAAD;AAA+B,QAAA,OAAO,EAAEK;AAAxC,SAAqB,SAArB;AAAA;AAAA;AAAA;AAAA,cANK,EAOL,QAAC,OAAD;AAAoB,QAAA,OAAO,EACvB,QAAC,MAAD,CAAQ,KAAR;AAAA,oBACKE,EAAE,IAAIb,IAAI,CAACoB,QAAL,KAAkBP,EAAxB,GACD;AAAA,uBACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,OAAO,EAAEX,iBAA/B;AAAkD,cAAA,OAAO,EAAEmB,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,0BADC,GAKG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAAA,kBAUI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAVJ,SAAa,MAAb;AAAA;AAAA;AAAA;AAAA,cAPK,CAFd,CAsBK;AAtBL;AAAA,gBAwBC,QAAC,IAAD,CAAM,IAAN;AACI,QAAA,MAAM,EAAE,QAAC,MAAD;AAAA,oBAASrB,IAAI,CAACuB,MAAL,CAAY,CAAZ;AAAT;AAAA;AAAA;AAAA;AAAA,gBADZ;AAEI,QAAA,KAAK,EAAEvB,IAAI,CAACuB,MAFhB;AAGI,QAAA,WAAW,EAAE,QAAC,eAAD;AAAiB,UAAA,QAAQ,EAAEvB,IAAI,CAACwB;AAAhC;AAAA;AAAA;AAAA;AAAA;AAHjB;AAAA;AAAA;AAAA;AAAA;AAxBD,OAAWxB,IAAI,CAACS,MAAhB;AAAA;AAAA;AAAA;AAAA,YADJ,EA+BML,gBAAgB,IACb;AAAA,iBAEI,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEJ;AAAnB;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGI,QAAC,IAAD;AACI,QAAA,MAAM,EAAG,GAAEA,IAAI,CAACyB,WAAL,CAAiBC,MAAO,OADvC;AAEI,QAAA,UAAU,EAAC,YAFf;AAGI,QAAA,UAAU,EAAE1B,IAAI,CAACyB,WAHrB;AAII,QAAA,UAAU,EAAGE,IAAD,IACR;AAAA,oBACI,QAAC,OAAD;AACI,YAAA,MAAM,EAAEA,IAAI,CAACJ,MADjB;AAEI,YAAA,MAAM,EAAE,QAAC,MAAD;AAAA,wBAASI,IAAI,CAACJ,MAAL,CAAY,CAAZ;AAAT;AAAA;AAAA;AAAA;AAAA,oBAFZ;AAGI,YAAA,OAAO,EAAEI,IAAI,CAACH;AAHlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AALR;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAhCT;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAuDH,CAzFD;;AA2FAzB,QAAQ,CAAC6B,SAAT,GAAqB;AACjB5B,EAAAA,IAAI,EAAErB,SAAS,CAACkD,KAAV,CAAgB;AAClBhB,IAAAA,EAAE,EAAElC,SAAS,CAACmD,MADI;AAElBC,IAAAA,IAAI,EAAEpD,SAAS,CAACqD,MAFE;AAGlBC,IAAAA,OAAO,EAAEtD,SAAS,CAACuD,MAHD;AAIlBC,IAAAA,SAAS,EAAExD,SAAS,CAACqD,MAJH;AAKlBI,IAAAA,QAAQ,EAAEzD,SAAS,CAAC0D,OAAV,CAAkB1D,SAAS,CAACqD,MAA5B,CALQ;AAMlBM,IAAAA,MAAM,EAAE3D,SAAS,CAAC0D,OAAV,CAAkB1D,SAAS,CAACqD,MAA5B;AANU,GAAhB,EAOHO;AARc,CAArB;AAWA,eAAexC,QAAf","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from '@emotion/react'\r\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\nimport { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST } from '../../../reducers/post';\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n    const [commentFormOpend, setCommentFormOpened] = useState(false); \r\n    \r\n    const onLike = useCallback(() => {\r\n        dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.postId\r\n        })\r\n    }, []);\r\n\r\n    const onUnlike = useCallback(() => {\r\n        dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.postId\r\n        })\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n    const id = useSelector((state) => state.user.me?.id); // optional chaining\r\n    // const id = me && me.id;\r\n    const liked = post.likers.find((v) => {\r\n        if(v.memberId == id) {\r\n            return true\r\n        }\r\n    }) || false;\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id\r\n        })\r\n    }, []);\r\n    return (\r\n       <div>\r\n           <Card key={post.postId}\r\n                cover={post.imageList[0] && <PostImages images={post.imageList} />}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\"/>, \r\n                    liked\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike}/>\r\n                    ,\r\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n                    <Popover key=\"more\" content={(\r\n                        <Button.Group>\r\n                            {id && post.memberId === id ? (\r\n                            <>\r\n                                <Button>수정</Button>\r\n                                <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                            </>\r\n                            ) : <Button>신고</Button>}\r\n                        </Button.Group>\r\n                    )}>\r\n                        <EllipsisOutlined />\r\n                    </Popover>\r\n                ]}\r\n                // extra={ id && <FollowButton post={post} />}\r\n            >\r\n            <Card.Meta\r\n                avatar={<Avatar>{post.writer[0]}</Avatar>}\r\n                title={post.writer} \r\n                description={<PostCardContent postData={post.description} />}\r\n            />\r\n            </Card>\r\n            {commentFormOpend && (\r\n                <div>\r\n                    {/* 어떤 게시글에 댓글을 달지 정보가 필요 - 게시글 id */}\r\n                    <CommentForm post={post}/>\r\n                    <List \r\n                        header={`${post.commentList.length}개의 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.commentList}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.writer}\r\n                                    avatar={<Avatar>{item.writer[0]}</Avatar>}\r\n                                    content={item.description}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </div>)}\r\n           {/* <CommentForm />\r\n           <Comments /> */}\r\n       </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}