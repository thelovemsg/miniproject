{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaWithMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaWithMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["D:/miniproject/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaWithMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,wBAAP,MAAqC,YAArC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAGA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACtE,SAAOD,IAAI,CAACC,MAAD,CAAX;AACJ,CAFD;;AAIA,MAAMC,cAAc,GAAG,MAAM;AACxB,QAAMC,cAAc,GAAGT,wBAAwB,EAA/C;AACA,QAAMU,WAAW,GAAG,CAACD,cAAD,EAAiBN,gBAAjB,CAApB;AACA,QAAMQ,QAAQ,GAAG,QACVd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADG,GAEVX,mBAAmB,CAACH,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAF1B;AAGA,QAAME,KAAK,GAAGd,WAAW,CAACG,OAAD,EAAUU,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBZ,QAAnB,CAAjB;AACA,SAAOU,KAAP;AACJ,CATD;;AAWA,MAAMG,OAAO,GAAGpB,aAAa,CAACa,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaWithMiddleware from 'redux-saga';\r\n\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n     return next(action);\r\n}\r\n\r\nconst configureStore = () => {\r\n     const sagaMiddleware = createSagaWithMiddleware();\r\n     const middlewares = [sagaMiddleware, loggerMiddleware];\r\n     const enhancer = process.env.NODE_ENV === 'production'\r\n          ? compose(applyMiddleware(...middlewares))\r\n          : composeWithDevTools(applyMiddleware(...middlewares));\r\n     const store = createStore(reducer, enhancer);\r\n     store.sagaTask = sagaMiddleware.run(rootSaga);\r\n     return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development'});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}