{"ast":null,"code":"var _jsxFileName = \"D:\\\\miniproject\\\\front\\\\components\\\\middleComponent\\\\Post\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { jsx, css } from '@emotion/react';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport ButtonGroup from 'antd/lib/button/button-group';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../../../reducers/post';\nimport FollowButton from './FollowButton';\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst PostCard = ({\n  post\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false);\n  const {\n    0: commentFormOpend,\n    1: setCommentFormOpened\n  } = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // optional chaining\n  // const id = me && me.id;\n\n  const onRemovePost = useCallback(() => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return _jsxDEV(\"div\", {\n    children: \"testing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this) //    <div>\n  //        <Card key={post.id}\n  //             cover={post.imageDtoList[0] && <PostImages images={post.Images} />}\n  //             actions={[\n  //                 <RetweetOutlined key=\"retweet\"/>, \n  //                 liked\n  //                     ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n  //                     : <HeartOutlined key=\"heart\" onClick={onToggleLike}/>\n  //                 ,\n  //                 <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n  //                 <Popover key=\"more\" content={(\n  //                     <Button.Group>\n  //                         {id && post.User.id === id ? (\n  //                         <>\n  //                             <Button>수정</Button>\n  //                             <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\n  //                         </>\n  //                         ) : <Button>신고</Button>}\n  //                     </Button.Group>\n  //                 )}>\n  //                     <EllipsisOutlined />\n  //                 </Popover>\n  //             ]}\n  //             extra={ id && <FollowButton post={post} />}\n  //         >\n  //         <Card.Meta\n  //             avatar={<Avatar>{post.writer}</Avatar>}\n  //             title={post.writer} \n  //             description={<PostCardContent postData={post.description} />}\n  //         />\n  //         </Card>\n  //         {commentFormOpend && (\n  //             <div>\n  //                 {/* 어떤 게시글에 댓글을 달지 정보가 필요 - 게시글 id */}\n  //                 <CommentForm post={post}/>\n  //                 <List \n  //                     header={`${post.Comments.length}개의 댓글`}\n  //                     itemLayout=\"horizontal\"\n  //                     dataSource={post.Comments}\n  //                     renderItem={(item) => (\n  //                         <li>\n  //                             <Comment\n  //                                 author={item.User.nickname}\n  //                                 avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n  //                                 content={item.content}\n  //                             />\n  //                         </li>\n  //                     )}\n  //                 />\n  //             </div>)}\n  //        {/* <CommentForm />\n  //        <Comments /> */}\n  //    </div>\n  ;\n};\n\n_s(PostCard, \"re5ll9267Y+A8VinLRJCBMedNOk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["D:/miniproject/front/components/middleComponent/Post/PostCard.js"],"names":["jsx","css","EllipsisOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","RetweetOutlined","PropTypes","Form","Input","Button","Card","Popover","Avatar","List","Comment","ButtonGroup","useCallback","useState","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","REMOVE_POST_REQUEST","FollowButton","PostCard","post","dispatch","removePostLoading","state","liked","setLiked","commentFormOpend","setCommentFormOpened","onToggleLike","prev","onToggleComment","id","user","me","onRemovePost","type","data","propTypes","shape","number","User","object","content","string","createdAt","Comments","arrayOf","Images","isRequired"],"mappings":"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","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { jsx, css } from '@emotion/react'\r\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Button, Card, Popover, Avatar, List, Comment } from 'antd';\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\nimport { useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { REMOVE_POST_REQUEST } from '../../../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const dispatch = useDispatch();\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n    const [liked, setLiked] = useState(false);\r\n    const [commentFormOpend, setCommentFormOpened] = useState(false); \r\n    const onToggleLike = useCallback(() => {\r\n        setLiked((prev) => !prev);\r\n    }, []);\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n    const id = useSelector((state) => state.user.me?.id); // optional chaining\r\n    // const id = me && me.id;\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id\r\n        })\r\n    }, []);\r\n    return (\r\n        <div>testing</div>\r\n    //    <div>\r\n    //        <Card key={post.id}\r\n    //             cover={post.imageDtoList[0] && <PostImages images={post.Images} />}\r\n    //             actions={[\r\n    //                 <RetweetOutlined key=\"retweet\"/>, \r\n    //                 liked\r\n    //                     ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\r\n    //                     : <HeartOutlined key=\"heart\" onClick={onToggleLike}/>\r\n    //                 ,\r\n    //                 <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n    //                 <Popover key=\"more\" content={(\r\n    //                     <Button.Group>\r\n    //                         {id && post.User.id === id ? (\r\n    //                         <>\r\n    //                             <Button>수정</Button>\r\n    //                             <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n    //                         </>\r\n    //                         ) : <Button>신고</Button>}\r\n    //                     </Button.Group>\r\n    //                 )}>\r\n    //                     <EllipsisOutlined />\r\n    //                 </Popover>\r\n    //             ]}\r\n    //             extra={ id && <FollowButton post={post} />}\r\n    //         >\r\n    //         <Card.Meta\r\n    //             avatar={<Avatar>{post.writer}</Avatar>}\r\n    //             title={post.writer} \r\n    //             description={<PostCardContent postData={post.description} />}\r\n    //         />\r\n    //         </Card>\r\n    //         {commentFormOpend && (\r\n    //             <div>\r\n    //                 {/* 어떤 게시글에 댓글을 달지 정보가 필요 - 게시글 id */}\r\n    //                 <CommentForm post={post}/>\r\n    //                 <List \r\n    //                     header={`${post.Comments.length}개의 댓글`}\r\n    //                     itemLayout=\"horizontal\"\r\n    //                     dataSource={post.Comments}\r\n    //                     renderItem={(item) => (\r\n    //                         <li>\r\n    //                             <Comment\r\n    //                                 author={item.User.nickname}\r\n    //                                 avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n    //                                 content={item.content}\r\n    //                             />\r\n    //                         </li>\r\n    //                     )}\r\n    //                 />\r\n    //             </div>)}\r\n    //        {/* <CommentForm />\r\n    //        <Comments /> */}\r\n    //    </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        id: PropTypes.number,\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n        Comments: PropTypes.arrayOf(PropTypes.object),\r\n        Images: PropTypes.arrayOf(PropTypes.object),\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}