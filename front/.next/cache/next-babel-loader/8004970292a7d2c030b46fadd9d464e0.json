{"ast":null,"code":"import { delay, fork, all, takeLatest, put, call } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport axios from 'axios'; // import Axios from 'axios';\n// import qs from 'query-string';\n\nimport Cookies from 'universal-cookie';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\nconst cookies = new Cookies();\n\nfunction addPostAPI(data) {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\");\n  const newObj = {\n    description: data,\n    email: userEmail\n  };\n  return axios.post('/auth/post', newObj, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result :: \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPost(action) {\n  try {\n    delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post/${data.postId}/comment', data);\n}\n\nfunction* addComment(action) {\n  try {\n    delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["delay","fork","all","takeLatest","put","call","shortId","axios","Cookies","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","generateDummyPost","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","cookies","addPostAPI","data","accessToken","get","userEmail","newObj","description","email","post","headers","addPost","action","result","console","log","type","id","content","error","loadPostAPI","loadPost","generate","removePostAPI","removePost","addCommentAPI","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put, call} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport axios from 'axios';\r\n// import Axios from 'axios';\r\n// import qs from 'query-string';\r\nimport Cookies from 'universal-cookie';\r\nimport { \r\n    ADD_COMMENT_FAILURE, \r\n    ADD_COMMENT_REQUEST, \r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, \r\n    ADD_POST_REQUEST, \r\n    ADD_POST_SUCCESS, \r\n    ADD_POST_TO_ME, \r\n    generateDummyPost, \r\n    LOAD_POST_FAILURE, \r\n    LOAD_POST_REQUEST, \r\n    LOAD_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE, \r\n    REMOVE_POST_REQUEST, \r\n    REMOVE_POST_SUCCESS \r\n} from \"../reducers/post\";\r\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nconst cookies = new Cookies();\r\nfunction addPostAPI(data) {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    const newObj = {\r\n        description : data,\r\n        email : userEmail\r\n    }\r\n    return axios.post('/auth/post', newObj,{\r\n        headers:{\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        console.log(\"result :: \", result);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n            \r\n        });\r\n        yield put({ \r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/post/${data.postId}/comment', data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}