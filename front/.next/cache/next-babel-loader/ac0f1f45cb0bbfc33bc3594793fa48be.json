{"ast":null,"code":"/** @jsxImportSource @emotion/react */\nimport { jsx, css } from '@emotion/react';\nimport { EllipsisOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { Form, Input, Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport ButtonGroup from 'antd/lib/button/button-group';\nimport { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { REMOVE_POST_REQUEST } from '../../../reducers/post';\nimport FollowButton from './FollowButton';\nimport { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"@emotion/react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useState2 = useState(false),\n      commentFormOpend = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // optional chaining\n  // const id = me && me.id;\n\n  var onRemovePost = useCallback(function () {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return _jsxs(\"div\", {\n    children: [_jsx(Card, {\n      cover: post.Images[0] && _jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [_jsx(RetweetOutlined, {}, \"retweet\"), liked ? _jsx(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }, \"heart\") : _jsx(HeartOutlined, {\n        onClick: onToggleLike\n      }, \"heart\"), _jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), _jsx(Popover, {\n        content: _jsx(Button.Group, {\n          children: id && post.User.id === id ? _jsxs(_Fragment, {\n            children: [_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), _jsx(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : _jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: _jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      extra: id && _jsx(FollowButton, {\n        post: post\n      }),\n      children: _jsx(Card.Meta, {\n        avatar: _jsx(Avatar, {\n          children: post.User.nickname[0]\n        }),\n        title: post.User.nickname,\n        description: _jsx(PostCardContent, {\n          postData: post.content\n        })\n      })\n    }, post.id), commentFormOpend && _jsxs(\"div\", {\n      children: [_jsx(CommentForm, {\n        post: post\n      }), _jsx(List, {\n        header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: function renderItem(item) {\n          return _jsx(\"li\", {\n            children: _jsx(Comment, {\n              author: item.User.nickname,\n              avatar: _jsx(Avatar, {\n                children: item.User.nickname[0]\n              }),\n              content: item.content\n            })\n          });\n        }\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}