{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'testnickname1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }, {\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }, {\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"테스트로 들어가는 콘텐츠 1\"\n    }, {\n      User: {\n        nickname: \"theloveMSJ\"\n      },\n      content: \"테스트로 들어가는 콘텐츠 2\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommnetLoading: false,\n  addCommnetDone: false,\n  addCommnetError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'thelovedaejeon'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'thelovedaejeon'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.data\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log(\"add comment success here!\");\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        console.log(\"add comment success here 1 !\");\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        console.log(\"add comment success here 2 !\");\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        console.log(\"add comment success here 3 !\");\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        console.log(\"immutable succecss\");\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/miniproject/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommnetLoading","addCommnetDone","addCommnetError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","dummyComment","reducer","state","action","addCommentLoading","addCommentDone","addCommentError","console","log","postIndex","findIndex","v","postId","post","error"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname:'testnickname1'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images:[{\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        },{\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        },{\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                nickname: \"nero\",\r\n            },\r\n            content: \"테스트로 들어가는 콘텐츠 1\"\r\n        },{\r\n            User: {\r\n                nickname: \"theloveMSJ\"\r\n            },\r\n            content:\"테스트로 들어가는 콘텐츠 2\"\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommnetLoading: false,\r\n    addCommnetDone: false,\r\n    addCommnetError: null,\r\n} \r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'thelovedaejeon',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'thelovedaejeon',\r\n    },\r\n})\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){ \r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.data\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS:{\r\n            console.log(\"add comment success here!\");\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            console.log(\"add comment success here 1 !\");\r\n            const post = {...state.mainPosts[postIndex]};\r\n            console.log(\"add comment success here 2 !\");\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            console.log(\"add comment success here 3 !\");\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n            console.log(\"immutable succecss\");\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            };\r\n        }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}