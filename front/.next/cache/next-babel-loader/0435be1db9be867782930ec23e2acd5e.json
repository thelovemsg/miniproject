{"ast":null,"code":"import shortId from 'shortid';\nimport produces, { produce } from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'testnickname1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"테스트로 들어가는 콘텐츠 1\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"theloveMSJ\"\n      },\n      content: \"테스트로 들어가는 콘텐츠 2\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommnetLoading: false,\n  addCommnetDone: false,\n  addCommnetError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: []\n})));\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'thelovedaejeon'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'thelovedaejeon'\n  }\n}); //이전 상태를 action을 통해 다음 상태로 만들어 내는 함수 (불변성을 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        console.log(\"remove post request!\");\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/miniproject/front/reducers/post.js"],"names":["shortId","produces","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommnetLoading","addCommnetDone","addCommnetError","removePostLoading","removePostDone","removePostError","concat","Array","fill","map","v","i","name","findName","lorem","paragraph","image","imageUrl","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","console","log","filter","addCommentLoading","addCommentDone","addCommentError","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produces, { produce } from 'immer';\r\nimport faker from 'faker';\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname:'testnickname1'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Images:[{\r\n            id: shortId.generate(),\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        },{\r\n            id: shortId.generate(),\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        },{\r\n            id: shortId.generate(),\r\n            src: \"http://ftps.ypage.kr/test32/data/file/yp_carsale/3537439288_iWtA1VgZ_8cf8e8e516955136d56933d22c616457cf714b99.png\"\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: \"nero\",\r\n            },\r\n            content: \"테스트로 들어가는 콘텐츠 1\"\r\n        },{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: \"theloveMSJ\"\r\n            },\r\n            content:\"테스트로 들어가는 콘텐츠 2\"\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommnetLoading: false,\r\n    addCommnetDone: false,\r\n    addCommnetError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n} \r\n\r\ninitialState.mainPosts.concat(\r\n    Array(20).fill().map((v, i) => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content:faker.lorem.paragraph(),\r\n        Images: [{\r\n            src: faker.image.imageUrl(),\r\n        }],\r\n        Comments: [],\r\n    }))\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'thelovedaejeon',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: 'thelovedaejeon',\r\n    },\r\n})\r\n\r\n//이전 상태를 action을 통해 다음 상태로 만들어 내는 함수 (불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce (state, (draft) => {\r\n        switch (action.type){ \r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone= false;\r\n                draft.addPostError= null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone= true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                console.log(\"remove post request!\");\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //   ...state,\r\n                //   mainPosts,\r\n                //   addCommentLoading: false,\r\n                //   addCommentDone: true,\r\n                // };\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}