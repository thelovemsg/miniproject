{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\nimport Cookies from \"universal-cookie\";\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, SIGN_UP_FAIL_DUPLICATE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAIL } from \"../reducers/user\";\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\nconst cookies = new Cookies();\nexport const FAIL = \"FAIL\";\nexport const SUCCESS = \"SUCCESS\";\nexport const DUPLICATE = \"DUPLICATE\";\n\nloadMyInfoAPI = () => {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\"); // return axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n  const data = {\n    email: userEmail\n  };\n  return axios.post('/auth/member', data, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n};\n\nonSilentRefresh = () => {\n  axios.post('/auth/reissue', data).then(onLoginSuccess).catch(error => {// ... 로그인 실패 처리\n  });\n};\n\nfunction* loadMyInfo(action) {\n  try {\n    const response = yield call(loadMyInfoAPI);\n    console.log(response);\n\n    if (response.data != \"\") {\n      console.log(response);\n      yield put({\n        type: LOAD_MY_INFO_SUCCESS,\n        data: response.data.result.postDtoIds\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_MY_INFO_FAIL,\n      error: error.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/auth/login', data);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    if (result.status == 401) {\n      console.log(\"testing when 401\");\n      warningMsg(\"로그인에 실패했습니다.\");\n      yield put({\n        type: LOG_IN_FAILURE\n      });\n    } else {\n      cookies.set(\"accessToken\", result.data.accessToken, {\n        path: '/'\n      });\n      cookies.set(\"refreshToken\", result.data.accessToken, {\n        path: '/'\n      });\n      cookies.set(\"userEmail\", action.data.email);\n      yield put({\n        type: LOG_IN_SUCCESS\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    warningMsg(\"로그인에 실패했습니다!\");\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* logout() {\n  console.log(\"logout needed!\");\n\n  try {\n    cookies.remove('accessToken');\n    cookies.remove('refreshToken');\n    cookies.remove('userEmail');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  let test = axios.post('/auth/signup', data);\n  return test;\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    if (result.data.status === DUPLICATE) {\n      yield put({\n        type: SIGN_UP_FAIL_DUPLICATE\n      });\n    } else {\n      yield put({\n        type: SIGN_UP_SUCCESS\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","Cookies","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SIGN_UP_FAIL_DUPLICATE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAIL","warningMsg","cookies","FAIL","SUCCESS","DUPLICATE","loadMyInfoAPI","accessToken","get","userEmail","data","email","post","headers","onSilentRefresh","then","onLoginSuccess","catch","error","loadMyInfo","action","response","console","log","type","result","postDtoIds","logInAPI","login","status","set","path","logout","remove","signUpAPI","test","signUp","followAPI","follow","unFollowAPI","unfollow","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\r\nimport Cookies from \"universal-cookie\";\r\nimport axios from 'axios';\r\nimport {\r\n    LOG_IN_FAILURE, \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, \r\n    LOG_OUT_REQUEST, \r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_REQUEST, \r\n    FOLLOW_REQUEST, \r\n    UNFOLLOW_REQUEST, \r\n    FOLLOW_FAILURE, \r\n    FOLLOW_SUCCESS, \r\n    UNFOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    SIGN_UP_FAIL_DUPLICATE,\r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAIL\r\n} from \"../reducers/user\";\r\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\r\nconst cookies = new Cookies();\r\nexport const FAIL = \"FAIL\";\r\nexport const SUCCESS = \"SUCCESS\";\r\nexport const DUPLICATE = \"DUPLICATE\";\r\n\r\nloadMyInfoAPI = () => {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    // return axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    const data = {\r\n        email: userEmail\r\n    }\r\n\r\n    return axios.post('/auth/member', data,{\r\n        headers:{\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\n\r\n\r\nonSilentRefresh = () => {\r\n    axios.post('/auth/reissue', data)\r\n        .then(onLoginSuccess)\r\n        .catch(error => {\r\n            // ... 로그인 실패 처리\r\n        });\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        const response = yield call(loadMyInfoAPI);\r\n        console.log(response);\r\n        if(response.data != \"\"){\r\n            console.log(response);\r\n            yield put({\r\n                type: LOAD_MY_INFO_SUCCESS,\r\n                data: response.data.result.postDtoIds\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAIL,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/auth/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data);\r\n        if(result.status == 401){\r\n            console.log(\"testing when 401\")\r\n            warningMsg(\"로그인에 실패했습니다.\");\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n            })\r\n        }else{\r\n            cookies.set(\"accessToken\", result.data.accessToken,{ path: '/' });\r\n            cookies.set(\"refreshToken\", result.data.accessToken,{ path: '/' });\r\n            cookies.set(\"userEmail\", action.data.email);\r\n            yield put({\r\n                type: LOG_IN_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        warningMsg(\"로그인에 실패했습니다!\");\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* logout() {\r\n    console.log(\"logout needed!\");\r\n    try {\r\n        cookies.remove('accessToken');\r\n        cookies.remove('refreshToken');\r\n        cookies.remove('userEmail');\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    let test = axios.post('/auth/signup', data);\r\n    return test;\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        if(result.data.status === DUPLICATE){\r\n            yield put({\r\n                type: SIGN_UP_FAIL_DUPLICATE,\r\n            });\r\n        } else {\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMyInfo(){\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}