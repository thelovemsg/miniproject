{"ast":null,"code":"import { delay, fork, all, takeLatest, put, call, takeLeading, throttle, debounce, take } from \"redux-saga/effects\";\nimport axios from 'axios'; // import Axios from 'axios';\n// import qs from 'query-string';\n\nimport Cookies from 'universal-cookie';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS } from \"../reducers/post\";\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nconst cookies = new Cookies();\n\nfunction addPostAPI(data) {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\");\n  const newObj = {\n    description: data,\n    email: userEmail\n  };\n  return axios.post('/auth/post', newObj, {\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => res.data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"result after add post :: \", result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.postId\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\");\n  const newObj = {\n    email: userEmail\n  }; // return axios.patch(`/auth/post/${data}/like`, newObj,{\n  //     headers:{\n  //         \"Authorization\": `Bearer ${accessToken}`,\n  //         \"Content-Type\": \"application/json\",\n  //     },\n  //     withCredentials : true\n  // });\n\n  return axios.post(`/auth/post/${data}/like`, newObj, {\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    withCredentials: true\n  });\n}\n/**\r\n * 그외에 좋아요 수를 보고 싶으면 수만 계산해서 가져오면 된다. \r\n * 문제는 like를 클릭했는지, 안했는지 로그인 하기 전까지는 모른다는 점이다. \r\n * 그러므로 로그인에 성공을 하면 게시글들을 보고 각각의 post에 대해 좋아요를 체크해줘야 한다. \r\n */\n\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log(\"likePostSuccess!!\", result);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        result: result.data\n      }\n    });\n  } catch (error) {\n    warningMsg(\"이런! 로그인이 필요합니다!\");\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\");\n  const newObj = {\n    email: userEmail\n  };\n  return axios.post(`/auth/post/${data}/unlike`, newObj, {\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        result: result.data\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/api/posts?page=${data.pageNumber}&size=${data.pageSize}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log(\"load post success :: \", result);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data.result\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  const accessToken = cookies.get(\"accessToken\");\n  const userEmail = cookies.get(\"userEmail\");\n  const newObj = {\n    description: data.description,\n    email: userEmail,\n    postId: data.postId\n  };\n  return axios.post('/auth/comment', newObj, {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (error) {\n    console.log(error);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: error.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddPost() {\n  yield takeLeading(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["delay","fork","all","takeLatest","put","call","takeLeading","throttle","debounce","take","axios","Cookies","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","warningMsg","ADD_POST_TO_ME","REMOVE_POST_OF_ME","cookies","addPostAPI","data","accessToken","get","userEmail","newObj","description","email","post","headers","then","res","addPost","action","result","console","log","type","postId","error","likePostAPI","withCredentials","likePost","unlikePostAPI","unlikePost","loadPostAPI","pageNumber","pageSize","loadPost","removePostAPI","removePost","addCommentAPI","addComment","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put, call, takeLeading, throttle, debounce, take} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\n// import Axios from 'axios';\r\n// import qs from 'query-string';\r\nimport Cookies from 'universal-cookie';\r\nimport { \r\n    ADD_COMMENT_FAILURE, \r\n    ADD_COMMENT_REQUEST, \r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, \r\n    ADD_POST_REQUEST, \r\n    ADD_POST_SUCCESS, \r\n    generateDummyPost, \r\n    LIKE_POST_FAILURE, \r\n    LIKE_POST_REQUEST, \r\n    LIKE_POST_SUCCESS, \r\n    LOAD_POST_FAILURE, \r\n    LOAD_POST_REQUEST, \r\n    LOAD_POST_SUCCESS, \r\n    REMOVE_POST_FAILURE, \r\n    REMOVE_POST_REQUEST, \r\n    REMOVE_POST_SUCCESS, \r\n    UNLIKE_POST_FAILURE, \r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS\r\n} from \"../reducers/post\";\r\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from \"../reducers/user\";\r\nconst cookies = new Cookies();\r\nfunction addPostAPI(data) {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    const newObj = {\r\n        description : data,\r\n        email : userEmail\r\n    }\r\n    return axios.post('/auth/post', newObj,{\r\n        headers:{\r\n            \"Authorization\": `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    }).then(res => res.data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"result after add post :: \", result);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result,\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.postId,\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    const newObj = {\r\n        email : userEmail\r\n    };\r\n    // return axios.patch(`/auth/post/${data}/like`, newObj,{\r\n    //     headers:{\r\n    //         \"Authorization\": `Bearer ${accessToken}`,\r\n    //         \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     withCredentials : true\r\n    // });\r\n    return axios.post(`/auth/post/${data}/like`, newObj,{\r\n        headers:{\r\n            \"Authorization\": `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        withCredentials : true\r\n    });\r\n}\r\n\r\n/**\r\n * 그외에 좋아요 수를 보고 싶으면 수만 계산해서 가져오면 된다. \r\n * 문제는 like를 클릭했는지, 안했는지 로그인 하기 전까지는 모른다는 점이다. \r\n * 그러므로 로그인에 성공을 하면 게시글들을 보고 각각의 post에 대해 좋아요를 체크해줘야 한다. \r\n */\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        console.log(\"likePostSuccess!!\", result);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId : action.data,\r\n                result : result.data\r\n            },\r\n        }); \r\n    } catch (error) {\r\n        warningMsg(\"이런! 로그인이 필요합니다!\");\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            data: error.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    const newObj = {\r\n        email : userEmail\r\n    };\r\n    return axios.post(`/auth/post/${data}/unlike`, newObj,{\r\n        headers:{\r\n            \"Authorization\": `Bearer ${accessToken}`,\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId : action.data,\r\n                result : result.data\r\n            },\r\n        }); \r\n    } catch (error) {\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            data: error.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/api/posts?page=${data.pageNumber}&size=${data.pageSize}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        console.log(\"load post success :: \", result);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data.result,\r\n        }); \r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data \r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n        });\r\n        yield put({ \r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    const accessToken = cookies.get(\"accessToken\");\r\n    const userEmail = cookies.get(\"userEmail\");\r\n    const newObj = {\r\n        description : data.description,\r\n        email : userEmail,\r\n        postId : data.postId,\r\n    }\r\n    return axios.post('/auth/comment', newObj, {\r\n            headers:{\r\n                'Authorization': `Bearer ${accessToken}`,\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchUnlikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLeading(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLikePost), \r\n        fork(watchUnlikePost), \r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}