{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { delay, fork, all, takeLatest, put } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          delay(2000); // const result = yield call(addPostAPI, action.data);\n\n          id = shortId.generate();\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 5:\n          _context.next = 7;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction loadPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function loadPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          delay(1000);\n          console.log(\"loading Post...\");\n          id = shortId.generate();\n          _context2.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            data: _context2.t0.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          delay(1000); // const result = yield call(addPostAPI, action.data);\n\n          id = shortId.generate();\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          delay(1000); // const result = yield call(addPostAPI, action.data);\n\n          _context4.next = 4;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 4:\n          _context4.next = 10;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 10;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 6]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return throttle(5000, LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n;","map":{"version":3,"sources":["D:/miniproject/front/sagas/post.js"],"names":["addPost","loadPost","removePost","addComment","watchAddPost","watchLoadPost","watchRemovePost","watchAddComment","postSaga","delay","fork","all","takeLatest","put","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","generateDummyPost","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","action","id","generate","type","content","loadPostAPI","get","console","log","removePostAPI","addCommentAPI","throttle"],"mappings":"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","sourcesContent":["import { delay, fork, all, takeLatest, put} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n     ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDummyPost, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\r\nimport { REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        delay(2000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data\r\n            }\r\n        })\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        delay(1000);\r\n        console.log(\"loading Post...\");\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: generateDummyPost(10)\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data\r\n            \r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        delay(1000);\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchLoadPost(){\r\n    yield throttle(5000, LOAD_POST_REQUEST, loadPost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment); // 첫번째것만 하고 싶으면 takeLeading\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchLoadPost), \r\n        fork(watchAddPost), \r\n        fork(watchRemovePost), \r\n        fork(watchAddComment), \r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}