{"ast":null,"code":"import shortId from 'shortid';\nimport produces, { produce } from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  pageable: {\n    offset: 0,\n    pageNumber: -1,\n    pageSize: 10,\n    paged: true,\n    unpaged: false\n  },\n  isPageSetting: false,\n  totalElements: 0,\n  totalPages: 0,\n  isLastPage: false,\n  isFirstPage: true,\n  mainPosts: [],\n  imagePaths: [],\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const LIKE_POST_SETTING_REQUEST = 'LIKE_POST_SETTING_REQUES';\nexport const LIKE_POST_SETTING_SUCCESS = 'LIKE_POST_SETTING_SUCCESS';\nexport const LIKE_POST_SETTING_FAILURE = 'LIKE_POST_SETTING_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); //이전 상태를 action을 통해 다음 상태로 만들어 내는 함수 (불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          console.log(\"action :: \", action);\n          const post = draft.mainPosts.find(v => v.postId === action.data.postId);\n          console.log(\"action.data.result :: \", action.data.result);\n          post.likers.push({\n            id: action.data.memberId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.postId === action.data.postId);\n          post.likers = post.likers.filter(v => v.postId !== action.data.memberId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data.content);\n        draft.pageable.pageNumber = action.data.pageable.pageNumber;\n        draft.pageable.pageSize = action.data.pageable.pageSize;\n        draft.pageable.paged = action.data.pageable.paged;\n        draft.pageable.offset = action.data.pageable.offset;\n        draft.pageable.paged = action.data.pageable.paged;\n        draft.pageable.unpaged = action.data.pageable.unpaged;\n        draft.totalPages = action.data.totalPages;\n        draft.totalElements = action.data.totalElements;\n        draft.isLastPage = action.data.last;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.postId === action.data.postId);\n          post.commentList.push(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/miniproject/front/reducers/post.js"],"names":["shortId","produces","produce","faker","initialState","pageable","offset","pageNumber","pageSize","paged","unpaged","isPageSetting","totalElements","totalPages","isLastPage","isFirstPage","mainPosts","imagePaths","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","LIKE_POST_SETTING_REQUEST","LIKE_POST_SETTING_SUCCESS","LIKE_POST_SETTING_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","data","type","addComment","reducer","state","action","draft","console","log","post","find","v","postId","result","likers","push","memberId","unshift","error","filter","concat","last","commentList"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produces, { produce } from 'immer';\r\nimport faker from 'faker';\r\nexport const initialState = {\r\n    pageable:{\r\n        offset: 0,\r\n        pageNumber: -1,\r\n        pageSize: 10,\r\n        paged: true,\r\n        unpaged: false,\r\n    },\r\n    isPageSetting: false,\r\n    totalElements: 0,\r\n    totalPages: 0,\r\n    isLastPage: false,\r\n    isFirstPage: true,\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostLoading: false,\r\n    loadPostDone: false,\r\n    loadPostError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n} \r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n    },\r\n    content:faker.lorem.paragraph(),\r\n    Images: [{ \r\n        src: faker.image.imageUrl(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName()\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\nexport const LIKE_POST_SETTING_REQUEST = 'LIKE_POST_SETTING_REQUES';\r\nexport const LIKE_POST_SETTING_SUCCESS = 'LIKE_POST_SETTING_SUCCESS';\r\nexport const LIKE_POST_SETTING_FAILURE = 'LIKE_POST_SETTING_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\n//이전 상태를 action을 통해 다음 상태로 만들어 내는 함수 (불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce (state, (draft) => {\r\n        switch (action.type){ \r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone= false;\r\n                draft.likePostError= null;\r\n                break;\r\n            case LIKE_POST_SUCCESS: {\r\n                console.log(\"action :: \", action);\r\n                const post = draft.mainPosts.find((v) => v.postId === action.data.postId);\r\n                console.log(\"action.data.result :: \",action.data.result);\r\n                post.likers.push({id : action.data.memberId})\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone= true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone= false;\r\n                draft.unlikePostError= null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.postId === action.data.postId);\r\n                post.likers = post.likers.filter((v) => v.postId !== action.data.memberId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone= true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n            case LOAD_POST_REQUEST:\r\n                draft.loadPostLoading = true;\r\n                draft.loadPostDone= false;\r\n                draft.loadPostError= null;\r\n                break;\r\n            case LOAD_POST_SUCCESS:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostDone= true;\r\n                draft.mainPosts = draft.mainPosts.concat(action.data.content);\r\n                draft.pageable.pageNumber = action.data.pageable.pageNumber;\r\n                draft.pageable.pageSize = action.data.pageable.pageSize;\r\n                draft.pageable.paged = action.data.pageable.paged;\r\n                draft.pageable.offset = action.data.pageable.offset;\r\n                draft.pageable.paged = action.data.pageable.paged;\r\n                draft.pageable.unpaged = action.data.pageable.unpaged;\r\n                draft.totalPages = action.data.totalPages;\r\n                draft.totalElements = action.data.totalElements;\r\n                draft.isLastPage = action.data.last;\r\n                break;\r\n            case LOAD_POST_FAILURE:\r\n                draft.loadPostLoading = false;\r\n                draft.loadPostError = action.error;\r\n                break;\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone= false;\r\n                draft.addPostError= null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone= true;\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{\r\n                const post = draft.mainPosts.find((v) => v.postId === action.data.postId);\r\n                post.commentList.push(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}