{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, SIGN_UP_FAIL_DUPLICATE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_MY_INFO_FAIL } from \"../reducers/user\";\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\nconst cookies = new Cookies();\nexport const FAIL = \"FAIL\";\nexport const SUCCESS = \"SUCCESS\";\nexport const DUPLICATE = \"DUPLICATE\";\n\nfunction loadMyInfoAPI() {\n  console.log(\"testing\");\n  return axios.get('/member');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    const result = yield call(loadMyInfoAPI);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOAD_MY_INFO_FAIL,\n      error: error.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/auth/login', data);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    if (result.status != 200) {\n      warningMsg(\"로그인에 실패했습니다!1111\");\n      yield put({\n        type: LOG_IN_FAILURE\n      });\n    } else {\n      console.log(result);\n      localStorage.setItem('token', token);\n      localStorage.setItem('authenticatedUser', action.data.email);\n      cookies.set(\"refreshToken\", result.data.refreshToken, {\n        sameSite: 'strict'\n      });\n      yield put({\n        type: LOG_IN_SUCCESS\n      });\n    }\n  } catch (error) {\n    warningMsg(\"로그인에 실패했습니다!\");\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    cookies.remove('refreshToken');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  let test = axios.post('/auth/signup', data);\n  return test;\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    if (result.data.status === DUPLICATE) {\n      yield put({\n        type: SIGN_UP_FAIL_DUPLICATE\n      });\n    } else {\n      yield put({\n        type: SIGN_UP_SUCCESS\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","axios","Cookies","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SIGN_UP_FAIL_DUPLICATE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOAD_MY_INFO_FAIL","warningMsg","cookies","FAIL","SUCCESS","DUPLICATE","loadMyInfoAPI","console","log","get","loadMyInfo","action","result","type","error","data","logInAPI","post","login","status","localStorage","setItem","token","email","set","refreshToken","sameSite","logout","remove","signUpAPI","test","signUp","followAPI","follow","unFollowAPI","unfollow","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\r\n\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport {\r\n    LOG_IN_FAILURE, \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, \r\n    LOG_OUT_REQUEST, \r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_REQUEST, \r\n    FOLLOW_REQUEST, \r\n    UNFOLLOW_REQUEST, \r\n    FOLLOW_FAILURE, \r\n    FOLLOW_SUCCESS, \r\n    UNFOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    SIGN_UP_FAIL_DUPLICATE,\r\n    LOAD_MY_INFO_REQUEST,\r\n    LOAD_MY_INFO_SUCCESS,\r\n    LOAD_MY_INFO_FAIL\r\n} from \"../reducers/user\";\r\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\r\nconst cookies = new Cookies();\r\nexport const FAIL = \"FAIL\";\r\nexport const SUCCESS = \"SUCCESS\";\r\nexport const DUPLICATE = \"DUPLICATE\";\r\n\r\nfunction loadMyInfoAPI() {\r\n    console.log(\"testing\");\r\n    return axios.get('/member');\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        const result = yield call(loadMyInfoAPI);\r\n        yield put({\r\n            type: LOAD_MY_INFO_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAIL,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/auth/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    try {\r\n        const result = yield call(logInAPI, action.data);\r\n        if(result.status != 200){\r\n            warningMsg(\"로그인에 실패했습니다!1111\");\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n            })\r\n        }else{\r\n            console.log(result);\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('authenticatedUser', action.data.email);\r\n            cookies.set(\"refreshToken\", result.data.refreshToken, {sameSite : 'strict'})\r\n            yield put({\r\n                type: LOG_IN_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        warningMsg(\"로그인에 실패했습니다!\");\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* logout() {\r\n    try {\r\n        cookies.remove('refreshToken');\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    let test = axios.post('/auth/signup', data);\r\n    return test;\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        if(result.data.status === DUPLICATE){\r\n            yield put({\r\n                type: SIGN_UP_FAIL_DUPLICATE,\r\n            });\r\n        } else {\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLoadMyInfo(){\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}