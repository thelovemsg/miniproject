{"ast":null,"code":"import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST, FOLLOW_REQUEST, UNFOLLOW_REQUEST, FOLLOW_FAILURE, FOLLOW_SUCCESS, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, SIGN_UP_FAIL_DUPLICATE } from \"../reducers/user\";\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\nconst cookies = new Cookies();\nexport const FAIL = \"FAIL\";\nexport const SUCCESS = \"SUCCESS\";\nexport const DUPLICATE = \"DUPLICATE\";\n\nfunction logInAPI(data) {\n  return axios.post('/auth/login', data);\n}\n\nfunction* login(action) {\n  console.log(\"testseitnsetist\");\n\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    if (result.status != 200) {\n      warningMsg(\"로그인에 실패했습니다!1111\");\n      yield put({\n        type: LOG_IN_FAILURE\n      });\n    } else {\n      yield put({\n        type: LOG_IN_SUCCESS\n      });\n      cookies.set(\"refreshToken\", result.data.refreshToken, {\n        sameSite: 'strict'\n      });\n    }\n  } catch (error) {\n    console.log(\"error : \", error);\n    warningMsg(\"로그인에 실패했습니다!\");\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* logout() {\n  try {\n    cookies.remove('refreshToken');\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  let test = axios.post('/auth/signup', data);\n  return test;\n}\n\nfunction* signUp(action) {\n  try {\n    console.log(action);\n    console.log(\"tetsint\");\n    const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    console.log(result);\n\n    if (result.data.status === DUPLICATE) {\n      yield put({\n        type: SIGN_UP_FAIL_DUPLICATE\n      });\n    } else {\n      yield put({\n        type: SIGN_UP_SUCCESS\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction unFollowAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\n}\n\nfunction* watchLogOut() {\n  // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\n  yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n  // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["D:/miniproject/front/sagas/user.js"],"names":["all","fork","put","delay","takeLatest","call","axios","Cookies","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","FOLLOW_REQUEST","UNFOLLOW_REQUEST","FOLLOW_FAILURE","FOLLOW_SUCCESS","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","SIGN_UP_FAIL_DUPLICATE","warningMsg","cookies","FAIL","SUCCESS","DUPLICATE","logInAPI","data","post","login","action","console","log","result","status","type","set","refreshToken","sameSite","error","logout","remove","signUpAPI","test","signUp","followAPI","follow","unFollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, call } from \"redux-saga/effects\";\r\n\r\nimport axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport {\r\n    LOG_IN_FAILURE, \r\n    LOG_IN_REQUEST, \r\n    LOG_IN_SUCCESS, \r\n    LOG_OUT_FAILURE, \r\n    LOG_OUT_REQUEST, \r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_FAILURE, \r\n    SIGN_UP_SUCCESS, \r\n    SIGN_UP_REQUEST, \r\n    FOLLOW_REQUEST, \r\n    UNFOLLOW_REQUEST, \r\n    FOLLOW_FAILURE, \r\n    FOLLOW_SUCCESS, \r\n    UNFOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    SIGN_UP_FAIL_DUPLICATE\r\n} from \"../reducers/user\";\r\nimport { warningMsg } from \"../utils/sweetAlertUtils\";\r\nconst cookies = new Cookies();\r\nexport const FAIL = \"FAIL\";\r\nexport const SUCCESS = \"SUCCESS\";\r\nexport const DUPLICATE = \"DUPLICATE\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/auth/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    console.log(\"testseitnsetist\");\r\n    try {\r\n        const result = yield call(logInAPI, action.data);\r\n        if(result.status != 200){\r\n            warningMsg(\"로그인에 실패했습니다!1111\");\r\n            yield put({\r\n                type: LOG_IN_FAILURE,\r\n            })\r\n        }else{\r\n            yield put({\r\n                type: LOG_IN_SUCCESS,\r\n            });\r\n            cookies.set(\"refreshToken\", result.data.refreshToken, {sameSite : 'strict'})\r\n        }\r\n    } catch (error) {\r\n        console.log(\"error : \", error);\r\n        warningMsg(\"로그인에 실패했습니다!\");\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* logout() {\r\n    try {\r\n        cookies.remove('refreshToken');\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    let test = axios.post('/auth/signup', data);\r\n    return test;\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        console.log(action);\r\n        console.log(\"tetsint\");\r\n        const result = yield call(signUpAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        console.log(result);\r\n        if(result.data.status === DUPLICATE){\r\n            yield put({\r\n                type: SIGN_UP_FAIL_DUPLICATE,\r\n            });\r\n        } else {\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction unFollowAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        yield delay(1000);\r\n        // const result = yield call(logInAPI, action.data); // 첫번째 자리가 함수고 그 다음자리부터는 함수의 매개변수가 온다. \r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (error) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: error.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeLatest(FOLLOW_REQUEST, follow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogIn(){\r\n    yield takeLatest(LOG_IN_REQUEST, login); // LOG_IN이라는 action이 실행될 때 까지 기다리겠다는 말\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    // yield takeEvery('LOG_OUT_REQUEST', logout); // 여러번 클릭해도 그만큼 응답이 감\r\n    yield takeLatest(LOG_OUT_REQUEST, logout); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n    // yield throttle('LOG_OUT_REQUREST', logout, 10000); // 얼마동안 한번만 요청을 보내도록 제한 가능\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp); //동시에 요청이 여러번 들어요면 마지막꺼만 실행한다. 응답을 취소하지 요청은 취소하지 않음\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}